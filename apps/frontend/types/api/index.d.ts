/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/auth/login": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** @description Create a session. */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          "application/json": {
            /** @description The email of the user. */
            email: string;
            /** @description The password of the user. */
            password: string;
            device: {
              /** @description The ip of the device. */
              ip?: string;
              /** @description The user agent of the device. */
              userAgent?: string;
            };
          };
        };
      };
      responses: {
        /** @description Default Response */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": {
              /** @description The token for the session. */
              token: string;
              /** @description The id of the session. */
              session: number;
            };
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/auth/register": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** @description Register a new user. */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          "application/json": {
            /** @description The name of the user. */
            name: string;
            /** @description The email of the user. */
            email: string;
            /** @description The password of the user. */
            password: string;
          };
        };
      };
      responses: {
        /** @description Default Response */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": {
              /** @description The id of the user. */
              id: number;
            };
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/chat/": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Get chat history. */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description The id of the chat. */
          chatId: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Default Response */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": {
              /** @description The role of the message. */
              role: string;
              /** @description The content of the message. */
              content: string;
            }[];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/chat/{chatId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** @description Chat with AI model (streaming response). */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description The id of the chat. */
          chatId: number;
        };
        cookie?: never;
      };
      requestBody: {
        content: {
          "application/json": {
            /** @description The text to chat. */
            content: string;
          };
        };
      };
      responses: {
        /** @description Streaming response of chat messages */
        200: {
          headers: {
            "content-type"?: "text/plain";
            [name: string]: unknown;
          };
          content: {
            "application/json": string;
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/chat/{chatId}/message/{messageId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /** @description Remove chat from history. */
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          chatId: string;
          messageId: string;
        };
        cookie?: never;
      };
      requestBody: {
        content: {
          "application/json": {
            /** @description The id of the message to remove. */
            chatId: string;
            /** @description The id of the message to remove. */
            messageId: string;
          };
        };
      };
      responses: {
        /** @description Default Response */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": Record<string, never>;
          };
        };
      };
    };
    options?: never;
    head?: never;
    /** @description Edit chat message. */
    patch: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description The id of the chat. */
          chatId: string;
          /** @description The id of the message. */
          messageId: string;
        };
        cookie?: never;
      };
      requestBody: {
        content: {
          "application/json": {
            /** @description The text to chat. */
            text: string;
          };
        };
      };
      responses: {
        /** @description Default Response */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": Record<string, never>;
          };
        };
      };
    };
    trace?: never;
  };
  "/hooks/sse": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Subscribe to server sent events */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Default Response */
        default: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "text/event-stream":
              | {
                  metadata: {
                    /** @description The role of the message. */
                    role: string;
                    /** @description The content of the message. */
                    content: string;
                  };
                  /** @enum {string} */
                  event: "/ai/chat";
                }
              | {
                  metadata: {
                    /** @description The id of the user. */
                    user: number;
                  };
                  /** @enum {string} */
                  event: "/auth/register";
                };
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/server/config": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Get the service's configuration. */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Default Response */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": Record<string, never>;
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: never;
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
